@page
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Localization
@using Volo.Abp.Account.Localization
@using Volo.Abp.Account.Settings
@using Volo.Abp.AspNetCore.Mvc.UI.MultiTenancy.Localization
@using Volo.Abp.Settings
@using AspNetCore.ReCaptcha
@using System.Web
@model PolpAbp.Presentation.Account.Web.Pages.Account.LoginModel
@inject IHtmlLocalizer<AccountResource> L

@{
    ViewBag.Title = "Single Login Entry Point";
    ViewBag.Description = "Redirects you to use the right login method, " +
    "either the pair of your user name/email and password, or your SSO providers.";
    ViewBag.HideTenancyView = true;

    var reActivationLink = Url.Page("./ResendActivationLink", new
    {
        UserName = Model.Input.IsUsingEmailAddress ? string.Empty : HttpUtility.UrlEncode(Model.Input.UserNameOrEmailAddress),
        EmailAddress = Model.Input.IsUsingEmailAddress ? HttpUtility.UrlEncode(Model.Input.UserNameOrEmailAddress) : string.Empty
    });
}

@section docReady {
    <script type="text/javascript">
        const returnUrl = '@(Model.ReturnUrl)';
        const returnUrlHash = '@(Model.ReturnUrlHash)';
        const initEmail = '@(Model.Input.UserNameOrEmailAddress?.Trim().ToLower())';
        const isRecaptchaVisible = @Model.IsRecaptchaEnabled.ToString().ToLower();
        Lockr.prefix = 'lockr_';

        function AppViewModel() {
            var self = this;

            self.pickVisible = ko.observable(false);
            self.users = ko.observable([]);
            self.formVisible = ko.pureComputed(function () {
                return !self.pickVisible();
            });
            self.canGoBack = ko.pureComputed(function () {
                return self.users().length && self.formVisible();
            });
        }

        const viewModel = new AppViewModel();
        ko.applyBindings(viewModel);

        function updateUserList(changeVisible, isInitEmailEmpty) {
            let users = Lockr.get('users');
            if (users && users.length) {
                let accounts = users.map(x => {
                    return {
                        email: x.email,
                        lastUpdated: $.timeago(new Date(x.lastUpdated))
                    }
                });
                isInitEmailEmpty && changeVisible && viewModel.pickVisible(true);
                viewModel.users(accounts);
            } else {
                viewModel.users([]);
                isInitEmailEmpty && changeVisible && viewModel.pickVisible(false);

                setTimeout(() => {
                    $('#Input_UserNameOrEmailAddress').focus();
                }, 100);
            }
        }

        $(document).ready(() => {

            updateUserList(true, !isRecaptchaVisible && !initEmail);

            $(".card").on('click', 'a.delete-me', (evt) => {
                const $target = $(evt.target).closest('a');
                let email = $target.data('email');
                if (email) {
                    let users = Lockr.get('users');
                    if (users) {
                        users = users.filter(a => a.email != email);
                        Lockr.set('users', users);
                        updateUserList(true, true);
                    }
                }
            });

            $(".card").on('click', 'a.pick-me', (evt) => {
                const $target = $(evt.target).closest('a');
                let email = $target.data('email');
                if (email) {
                    viewModel.pickVisible(false);
                    setTimeout(() => {
                        $('#Input_UserNameOrEmailAddress').val(email);
                        $('#Input_UserNameOrEmailAddress').focus();
                    }, 100);
                }
            });

            $(".card").on('click', 'a.new-account', () => {
                viewModel.pickVisible(false);

                setTimeout(() => {
                    $('#Input_UserNameOrEmailAddress').val('');
                    $('#Input_UserNameOrEmailAddress').focus();
                }, 100);
            });

            $(".card").on('click', 'a.go-back', () => {
                viewModel.pickVisible(true);
            });

            // Update time
            setInterval(() => {
                updateUserList(true, true);
            }, 60 * 1000);
        });
    </script>
}

<div class="d-flex align-items-center mb-2">
    <a class="me-3 go-back text-primary" style="cursor:pointer;" data-bind="visible: canGoBack">
        <i class="fa fa-long-arrow-left"></i> 
    </a>
    <h4 class="fw-semibold">Login</h4>
</div>
<div class="mb-4 ms-2">
    @L["AreYouANewUser"]
    <a href="@Url.Page("./Register")">@L["Register"]</a>
</div>

@if (Model.IsUserNameEnabled)
{
    if (Model.Resolution.OptionId <= 0 || Model.Resolution.OptionId > 2)
    {
        <div class="alert alert-info d-flex align-items-center" role="alert">
            Please choose one way to locate your information
        </div>

        <form method="post">

            <div class="d-flex flex-wrap">
                <div class="mb-3 me-3">
                    <input type="radio" class="btn-check" name="Resolution.OptionId"
                   id="Resolution-By-Email" value="1" autocomplete="off" checked>
                    <label class="btn btn-outline-dark" for="Resolution-By-Email">Email Address</label>
                </div>

                <div class="mb-3">
                    <input type="radio" class="btn-check" name="Resolution.OptionId"
                   id="Resolution-By-Name" value="2" autocomplete="off">
                    <label class="btn btn-outline-dark" for="Resolution-By-Name">User Name</label>
                </div>
            </div>

            <div class="d-grid gap-2">
                <abp-button type="submit" button-type="Primary" name="Action"
                    value="Resolution" class="btn-block mt-3">
                    @L["Continue"]
                    <span class="spinner-box">
                    </span>
                </abp-button>
            </div>
        </form>
    }
    else if (Model.Resolution.OptionId != 1)
    {
        <!-- Pick an account -->
        <div class="pick-one-account" data-bind="visible: pickVisible">
            <div class="alert alert-info">
                Please pick one account or use a new acount
            </div>
            <ul class="list-unstyled" data-bind="foreach: users">
                <li class="d-flex mb-4 border-bottom">
                    <div class="flex-xl-shrink-0">
                        <i class="far fa-user-circle fa-2x"></i>
                    </div>
                    <div class="flex-grow-1 ms-3">
                        <div class="d-flex flex-row justify-content-between mb-0">
                            <a class="pick-me" style="cursor: pointer; text-decoration: none;" data-bind="attr: {'data-email': email}">
                                <h6 data-bind="text: email" class="text-dark">
                                </h6>
                                <p class="text-muted">
                                    Last login: <span data-bind="text: lastUpdated"></span>
                                </p>
                            </a>
                            <a class="delete-me text-danger px-2" style="cursor:pointer;" data-bind="attr: {'data-email': email}">
                                <i class="fas fa-trash"></i>
                            </a>
                        </div>
                    </div>
                </li>
            </ul>
            <ul class="list-unstyled">
                <li class="d-flex mb-4">
                    <div class="flex-xl-shrink-0">
                        <i class="fas fa-plus-circle fa-2x"></i>
                    </div>
                    <div class="flex-grow-1 ms-3">
                        <a class="h6 new-account pe-5" style="cursor: pointer">
                            New account
                        </a>
                    </div>
                </li>
            </ul>
        </div>

        <form method="post" data-bind="visible: formVisible">

            <div class="alert alert-info d-flex align-items-center" role="alert">
                Please type your email address
            </div>

            <input asp-for="Input.IsUsingEmailAddress" type="hidden" value="true" autocomplete="off" />

            <abp-input asp-for="Input.UserNameOrEmailAddress" auto-focus="true" type="email"
               label="@L["DisplayName:Email"].Value" autocomplete="email" />

            <div class="d-grid gap-2">
                <abp-button type="submit" button-type="Primary" name="Action" value="Input" class="mt-3">
                    @L["Continue"]
                    <span class="spinner-box">
                    </span>
                </abp-button>
                <abp-button type="submit" button-type="Secondary" formnovalidate="formnovalidate"
                    name="Action" value="Cancel" class="mt-3">
                    @L["Back"]
                </abp-button>
            </div>
        </form>
    }
    else
    {
        <div class="alert alert-info d-flex align-items-center" role="alert">
            Please type your user name
        </div>

        <form method="post">
            <input asp-for="Input.IsUsingEmailAddress" type="hidden" value="false" autocomplete="off" />

            <abp-input asp-for="Input.UserNameOrEmailAddress" auto-focus="true"
               label="@L["DisplayName:UserName"].Value" autocomplete="username" />

            <div class="d-grid gap-2">
                <abp-button type="submit" button-type="Primary" name="Action" value="Input" class="mt-3">
                    @L["Continue"]
                    <span class="spinner-box"></span>
                </abp-button>
                <abp-button type="submit" button-type="Secondary" formnovalidate="formnovalidate"
                    name="Action" value="Cancel" class="mt-3">
                    @L["Back"]
                </abp-button>
            </div>
        </form>
    }
}
else
{
    <!-- Pick an account -->
    <div class="pick-one-account" data-bind="visible: pickVisible">
        <div class="alert alert-info">
            Please pick one account or use a new acount
        </div>
        <ul class="list-unstyled" data-bind="foreach: users">
            <li class="d-flex mb-4 border-bottom">
                <div class="flex-xl-shrink-0">
                    <i class="far fa-user-circle fa-2x"></i>
                </div>
                <div class="flex-grow-1 ms-3">
                    <div class="d-flex flex-row justify-content-between mb-0">
                            <a class="pick-me" style="cursor: pointer; text-decoration: none;" data-bind="attr: {'data-email': email}">
                            <h6 data-bind="text: email" class="text-dark">
                            </h6>
                            <p class="text-muted">
                                Last login: <span data-bind="text: lastUpdated"></span>
                            </p>
                        </a>
                        <a class="delete-me text-danger px-2" style="cursor:pointer;" data-bind="attr: {'data-email': email}">
                            <i class="fas fa-trash"></i>
                        </a>
                    </div>
                </div>
            </li>
        </ul>
        <ul class="list-unstyled">
            <li class="d-flex mb-4">
                <div class="flex-xl-shrink-0">
                    <i class="fas fa-plus-circle fa-2x"></i>
                </div>
                <div class="flex-grow-1 ms-3">
                    <a class="h6 new-account pe-5" style="cursor: pointer">
                        New account
                    </a>
                </div>
            </li>
        </ul>
    </div>


    <form method="post" data-bind="visible: formVisible">
        <div class="alert alert-info d-flex align-items-center" role="alert">
            Please type your email address
        </div>
        <input asp-for="Input.IsUsingEmailAddress" type="hidden" value="true" autocomplete="off" />

        <abp-input asp-for="Input.UserNameOrEmailAddress" auto-focus="true" type="email"
               label="@L["DisplayName:Email"].Value" autocomplete="email" />

        <div class="d-grid gap-2">
            <abp-button type="submit" button-type="Primary" name="Action" value="Input" class="mt-3">
                @L["Continue"]
                <span class="spinner-box">
                </span>
            </abp-button>
        </div>
    </form>
}